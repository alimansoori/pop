import {GoogleSpreadsheet, GoogleSpreadsheetWorksheet} from "google-spreadsheet"
import {keys} from "../keys";
import {Page} from "puppeteer";
import SourceSiteFactory from "../stores/SourceSiteFactory";
import IStore from "../stores/IStore";
import {fetchDataAzInsight} from "../sites/amazon/azInsight";
import {Schema} from "mongoose";
import Keepa from "../lib/Keepa";
import MyDate from "../lib/MyDate";

export default class GoogleSheets {
    private page
    private doc
    private startFrom: number
    private dateSave: string

    constructor(page: Page, startFrom: any, dateSave: any) {
        this.doc = new GoogleSpreadsheet('15Xz1TZJKkOG5O5fZ7MeH6hQKoS4in8g-VF8dRBnczKY')
        this.page = page
        this.startFrom = parseInt(startFrom)
        this.dateSave = dateSave

        this.auth()
    }

    async auth() {

        await this.doc.useServiceAccountAuth({
            // env var values are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            client_email: keys.client_email,
            private_key: keys.private_key,
        });

        await this.doc.loadInfo()
        const dataBaseSheet = await this.doc.sheetsByTitle['test']

        await dataBaseSheet.setHeaderRow([
            'Date',
            'Updated',
            'Source',
            'Sell Approval',
            'ASIN',
            'Source URL',
            'Amazon URL',
            'Image',
            'Category',
            'IN Stock',
            'Source Price',
            'Sell Price',
            'BuyBox Price',
            '30-D Amazon In Stock',
            'Badge',
            'BuyBox is Amazon',
            'BuyBox avg 30 day',
            'Top',
            'Net',
            'ROI',
            'BSR',
            'Package Quantity',
            'Signature',
        ])

        try {
            /*const store = await this.sourceSite("https://www.theisens.com/products/2-cup-jelly-2-orange-slice-hanging-oriole-feeder/")
            await store.scrape()
            console.log("Source Price is: " + store.getPrice())
            console.log("Source is in stock: " + store.isAvailability())*/

            await this.iterateRows(dataBaseSheet)
        } catch (e: any) {
            console.log(e.message)
        }
    }

    currentDate(): string {
        let ddd = new Date()
        let month = new Intl.DateTimeFormat('en', {month: "short"}).format(ddd)
        let day = new Intl.DateTimeFormat('en', {day: "2-digit"}).format(ddd)
        let year = new Intl.DateTimeFormat('en', {year: "numeric"}).format(ddd)

        return `${month}/${day}/${year}`
    }

    async sourceSite(url: string): Promise<IStore> {
        const store = await SourceSiteFactory.create(
            this.page,
            url
        )

        console.log(store.getDomain())

        return store
    }

    async iterateRows(dataBaseSheet: GoogleSpreadsheetWorksheet) {
        const rows = await dataBaseSheet.getRows(/*{
                offset:6,
                limit: 10
            }*/)

        for (let i = this.startFrom; i < rows.length; i++) {
            if (!rows[i]['Source URL'] || !rows[i]['Amazon URL']) {
                console.log(`>>>> row ${rows[i].rowIndex} Source URL OR Amazon URL not exist`)
                continue
            }

            const updated = new Date(rows[i]['Updated'])
            const current = new Date(this.currentDate())
            if (rows[i]['Updated'] && MyDate.dateDiff(current, updated) < 30) {
                console.log(`Next >>>`)
                continue
            }

            console.log(`Start Row: ${i+2}`)
            console.log(rows[i]['Amazon URL'])
            console.log(rows[i]['Source URL'])
            try {
                const store = await this.sourceSite(rows[i]['Source URL'])
                await store.scrape()
                console.log("Source Price is: " + store.getPrice())
                console.log("Source is in stock: " + store.isAvailability())

                if (store.getPrice() > 0 && store.isAvailability()) {
                    const keepa = new Keepa({
                        asin: rows[i]['ASIN'],
                        sourcePrice: store.getPrice()
                    })
                    await keepa.fetchByKeepa()
                    rows[i]['30-D Amazon In Stock'] = keepa.amazonInStock
                    rows[i]['Sell Price'] = keepa.sellPrice
                    rows[i]['Buy Box Price'] = keepa.sellPrice
                    rows[i]['Badge'] = keepa.hasBadge
                    rows[i]['Net'] = keepa.profit
                    rows[i]['Category'] = keepa.category
                    rows[i]['ROI'] = keepa.roi
                    rows[i]['BSR'] = keepa.bsr
                    rows[i]['Image'] = keepa.image

                    if (keepa?.hasBadge) {
                        // rows[i]['Updated'] = this.currentDate()
                        rows[i]['Updated'] = this.dateSave
                    }
                }


                /*if (store.getPrice() > 0 && store.isAvailability()) {
                    const amzData = await fetchDataAzInsight(this.page, rows[i]['Amazon URL'], store.getPrice())
                    rows[i]['Top'] = amzData?.top
                    rows[i]['Net'] = amzData?.net
                    rows[i]['BSR'] = amzData?.bsr
                    rows[i]['Category'] = amzData?.category
                    // rows[i]['90-D BSR'] = amzData?.bsr90
                    // rows[i]['Offers'] = amzData?.offers
                    rows[i]['Sell Price'] = amzData?.sellPrice
                    rows[i]['ROI'] = amzData?.roi
                    // rows[i]['Monthly Sales'] = amzData.sales
                    rows[i]['30-D Amazon In Stock'] = amzData?.amz ? "TRUE" : "FALSE"
                    // rows[i]['30-D Badge'] = amzData.badge30 ? "Yes" : "No"
                    // rows[i]['90-D Badge'] = amzData.badge90 ? "Yes" : "No"
                    if (amzData?.badge30) {
                        rows[i]['Updated'] = this.currentDate()
                    }
                }*/

                rows[i]['Source'] = store.getDomain()

                // rows[i]['Image'] = `=I${i+2}`
                rows[i]['IN Stock'] = store.isAvailability() ? "TRUE": "FALSE"
                rows[i]['Source Price'] = store.getPrice()
                await rows[i].save()

                // sourceCell.value = store.getDomain()
                // updatedCell.value = this.currentDate()
                // // @ts-ignore
                // inStockCell.value = store.isAvailability();
                // console.log(await sourcePriceCell.valueType)
                // sourcePriceCell.value = store.getPrice()
                //
                // await dataBaseSheet.saveUpdatedCells()

                if (i === (rows.length - 2)) {
                    i = 0
                }
            } catch (e: any) {
                console.log(e.message)
                continue
            }
        }
    }
}